/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author armaankhullar
 */
import javax.swing.*;
import javax.swing.table.*;
import java.sql.*;
import java.io.*;
import java.text.*;
import java.util.*;

public class SaleReturnFrameAK extends javax.swing.JFrame {

    /**
     * Creates new form SaleReturnFrameAK
     */
    public SaleReturnFrameAK() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        returnTable = new javax.swing.JTable();
        transactionidLabel = new javax.swing.JLabel();
        transactionField = new javax.swing.JTextField();
        itemLabel = new javax.swing.JLabel();
        itemField = new javax.swing.JTextField();
        conditionLabel = new javax.swing.JLabel();
        satisfactoryRadio = new javax.swing.JRadioButton();
        damagedRadio = new javax.swing.JRadioButton();
        reimbursementLabel = new javax.swing.JLabel();
        cashRadio = new javax.swing.JRadioButton();
        ccField = new javax.swing.JTextField();
        creditRadio = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        receipt = new javax.swing.JTextArea();
        processButton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        returnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Transaction ID", "Item ID", "Quantity", "Total"
            }
        ));
        jScrollPane1.setViewportView(returnTable);

        transactionidLabel.setText("Transaction id:");

        transactionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionFieldActionPerformed(evt);
            }
        });

        itemLabel.setText("Enter item id: ");

        itemField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFieldActionPerformed(evt);
            }
        });

        conditionLabel.setText("Item condition:");

        satisfactoryRadio.setText("Satisfactory");
        satisfactoryRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                satisfactoryRadioActionPerformed(evt);
            }
        });

        damagedRadio.setText("Damaged");
        damagedRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                damagedRadioActionPerformed(evt);
            }
        });

        reimbursementLabel.setText("Reimbursement option:");

        cashRadio.setText("Cash");
        cashRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashRadioActionPerformed(evt);
            }
        });

        ccField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ccFieldActionPerformed(evt);
            }
        });

        creditRadio.setText("Credit");
        creditRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditRadioActionPerformed(evt);
            }
        });
        
        
        printReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{printReceiptActionPerformed(evt);
                }
                catch(Exception e)
                {
                  e.printStackTrace();
                }
            }
        });
        
        

        jLabel6.setText("Credit Card Number: ");

        backButton.setText("Go Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        receipt.setColumns(20);
        receipt.setRows(5);
        jScrollPane2.setViewportView(receipt);

        processButton.setText("Process");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

               javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(backButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(printReceipt)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(transactionidLabel)
                                            .addComponent(itemLabel)
                                            .addComponent(quantityLabel))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(quantityField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                            .addComponent(itemField)
                                            .addComponent(transactionField)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cashRadio)
                                            .addComponent(creditRadio)
                                            .addComponent(reimbursementLabel))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(damagedRadio)
                                            .addComponent(satisfactoryRadio)
                                            .addComponent(conditionLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(ccField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(processButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)))
                                .addGap(507, 507, 507)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(transactionidLabel)
                            .addComponent(transactionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemLabel)
                            .addComponent(itemField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityLabel)
                            .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reimbursementLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cashRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(creditRadio))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(conditionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(satisfactoryRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(damagedRadio)))
                        .addGap(6, 6, 6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(ccField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel5))
                            .addComponent(processButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(printReceipt)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backButton)))
                .addContainerGap())
        );        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void satisfactoryRadioActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void creditRadioActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void transactionFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void itemFieldActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void cashRadioActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void damagedRadioActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void ccFieldActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt)
    {                                              
      if(damagedRadio.isSelected() == false && satisfactoryRadio.isSelected() == false)
      {  
         JOptionPane.showMessageDialog(null, "Please select item(s) condition.");
         return;
      }
      
      else if(damagedRadio.isSelected() == true && satisfactoryRadio.isSelected() == true)
      {   JOptionPane.showMessageDialog(null, "Please select only one item(s) condition.");
         return;
      }
      
      if(cashRadio.isSelected() == false && creditRadio.isSelected() == false)
      {  
         JOptionPane.showMessageDialog(null, "Please select a reimbursement option.");
         return;
      }
      
      else if(cashRadio.isSelected() == true && creditRadio.isSelected() == true)
      {   JOptionPane.showMessageDialog(null, "Please select only one reimbursement option.");
         return;
      }
      
      String ccN = "";
      if(creditRadio.isSelected() == true)
      {
         ccN = ccField.getText();
         if(ccN.length() == 0)
         {
          JOptionPane.showMessageDialog(null, "Please enter a valid credit card number (16 digits).", "Invalid Credit Card", JOptionPane.ERROR_MESSAGE);
            return;
         }
            
         
         if(Input.isInteger(ccN) && ccN.length()==16)
         {
            System.out.println("Valid ccn");
         }
         
         else
         {
            JOptionPane.showMessageDialog(null, "Please enter a valid credit card number (16 digits).", "Invalid Credit Card", JOptionPane.ERROR_MESSAGE);
            return;
         }
      }
     
         
      DefaultTableModel model = (DefaultTableModel) returnTable.getModel();
      List<String> list = new ArrayList<String>();
      double total = 0;
      ResultSet result = null;
      Statement s = null;
      String q = "";
      
      
      try
      {
          q = "select * from transactionItems where idtransaction = '" + transactionField.getText() + "' and iditem = '" + itemField.getText() + "'";
          s = con.createStatement();
          result = s.executeQuery(q);
         
         if(!result.next())
         {
            JOptionPane.showMessageDialog(null,  "The given transaction was not found.", "Invalid Entry", JOptionPane.ERROR_MESSAGE);
            return;
         }
         
         q = "select salePrice from item where itemID = '" + itemField.getText() + "'";
         result = s.executeQuery(q);
         double unitPrice = 0;
         if(result.next())
         {
            unitPrice = Double.parseDouble(result.getString(1)); 
            System.out.println(unitPrice);
            int quantity = 0;
            try
            { 
               quantity = Integer.parseInt(quantityField.getText());
            }
            catch(Exception e)
            { 
               JOptionPane.showMessageDialog(null, "Please specify a proper integer for the quantity.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
               return;
            }
            total = unitPrice * quantity;
            colTotal.add(total);
         }
         
         q = "select quantity from transactionItems where idtransaction = '" + transactionField.getText() + "' and iditem = '" + itemField.getText() + "'";
         result = s.executeQuery(q);
         int original = 0;
         if(result.next())
         {
            original = Integer.parseInt(result.getString(1));
            int quantity = 0;
            try
            {
               quantity = Integer.parseInt(quantityField.getText());
            }
            catch(Exception e) 
            {
               JOptionPane.showMessageDialog(null, "Please specify a proper integer for the quantity.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
               return;
            }
            
            if(quantity > original)
            {
               JOptionPane.showMessageDialog(null, "You cannot return more items than were purchased.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
               return;
            }
          }
         
         if(satisfactoryRadio.isSelected() == true)
         {
          
           q = "select currentInventory from item where itemID = '" + itemField.getText() + "'";
           result = s.executeQuery(q);
           int currentInventory = 0; 
         
         if(result.next())
         {
           currentInventory = Integer.parseInt(result.getString(1));
           int quantity = Integer.parseInt(quantityField.getText());
           currentInventory += quantity;
           inventory.add("update item set currentInventory = '" + currentInventory + "' where itemID = '" + itemField.getText() + "'");
           receiptText += "\n*Transaction id: " + transactionField.getText() +"\nItem id: " + itemField.getText() + "\nReturn quantity: " + quantity + "\n";
           System.out.println("Did it");
         }
           
       }
       

       
       else
       {
            //insert into damaged inventory.
       }
        s.close(); 
        
      }
      
      catch(Exception e)
      {
        e.printStackTrace();      
      }
      
      String refund = total + "";
      list.add(transactionField.getText());
      System.out.println(transactionField.getText());
      list.add(itemField.getText());
      list.add(quantityField.getText());
      list.add(refund);
      //list.add(itemField.getSelectedItem());

      model.addRow(list.toArray());
      returnTable.setModel(model);
      
        transactionField.setText("");
       itemField.setText("");
       quantityField.setText("");
      //s.close();
      
      
      
     /* list.add("JOhn");
      list.add("Armaan");
      list.add("bob");
      list.add("Dave");
      Object[] row = new Object[4];
      for(int i = 0; i< list.size(); i++)
      {
         row[0] = list.get(i);
         row[1] = list.get(i);
         row[2] = list.get(i);
         row[3] = list.get(i);         
         
         model.addRow(row);
      }
      */
    }                                             

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
         
    // TODO add your handling code here:
        this.dispose();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ActionFrame().setVisible(true);
            }
        });
    }//GEN-LAST:event_buttonGoBackActionPerformed
 
    
    
    
    
    private void printReceiptActionPerformed(java.awt.event.ActionEvent evt) throws SQLException, IOException, java.lang.ClassNotFoundException
    {
         Statement s = con.createStatement();
         PreparedStatement update = null;
         ResultSet result = null;
         
         
         for(int i = 0; i<inventory.size(); i++)
         {
            String q = inventory.get(i);
            update = con.prepareStatement(q);
            update.executeUpdate(q);
         }
         System.out.println(receiptText); 
         
         double finalTotal = 0;
         for(int i = 0; i<colTotal.size(); i++)
         {
            finalTotal += colTotal.get(i);
         }
         if(receiptText.length() == 0)
         {
            JOptionPane.showMessageDialog(null, "Please first process the return.");
            return;
         }
         receiptText += "\nSUBTOTAL: " + finalTotal;
         receipt.setText(receiptText);
         JOptionPane.showMessageDialog(null, "Updated Database.");      
         s.close();
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaleReturnFrameAK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaleReturnFrameAK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaleReturnFrameAK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaleReturnFrameAK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaleReturnFrameAK().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton backButton;
    private javax.swing.JRadioButton cashRadio;
    private javax.swing.JTextField ccField;
    private javax.swing.JLabel conditionLabel;
    private javax.swing.JRadioButton creditRadio;
    private javax.swing.JRadioButton damagedRadio;
    private javax.swing.JTextField itemField;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processButton;
    private javax.swing.JTextArea receipt;
    private javax.swing.JLabel reimbursementLabel;
    private javax.swing.JTable returnTable;
    private javax.swing.JRadioButton satisfactoryRadio;
    private javax.swing.JTextField transactionField;
    private javax.swing.JLabel transactionidLabel;
    DBConnection temp = new DBConnection();
	 Connection con = temp.getConnection();
    private JLabel quantityLabel = new JLabel("Return Quantity");
    private JTextField quantityField = new JTextField();
    private ArrayList<String> inventory = new ArrayList<String>();
    private JButton printReceipt = new JButton("Complete Return & Print Receipt");
    private String receiptText = "";
    private ArrayList<Double> colTotal = new ArrayList<Double>();
    // End of variables declaration                   
}
